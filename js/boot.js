// Generated by CoffeeScript 2.5.1
(function() {
  /*1964js - JavaScript/HTML5 port of 1964 - N64 emulator
  Copyright (C) 2012 Joel Middendorf

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.*/
  /*globals C1964jsEmulator*/
  C1964jsEmulator.prototype.getTVSystem = function(countryCode) {
    "use strict";
    var system;
    system = void 0;
    switch (countryCode) {
      case 0: // Demo
        this.log("NTSC 0");
        system = this.TV_SYSTEM_NTSC;
        break;
      case 0x37: // '7'
        this.log("NTSC 7");
        system = this.TV_SYSTEM_NTSC;
        break;
      case 0x41:
        this.log("NTSC 0x41");
        system = this.TV_SYSTEM_NTSC;
        break;
      case 0x44: // 'D' Germany
        this.log("PAL (Germany)");
        system = this.TV_SYSTEM_PAL;
        break;
      case 0x45: //'E' United States
        this.log("NTSC (United States)");
        system = this.TV_SYSTEM_NTSC;
        break;
      case 0x46: // 'F' France
        this.log("PAL (France)");
        system = this.TV_SYSTEM_PAL;
        break;
      case "I": // 'I' Italy
        this.log("PAL (Italy)");
        system = this.TV_SYSTEM_PAL;
        break;
      case 0x4A: // 'J' Japan
        this.log("NTSC (Japan)");
        system = this.TV_SYSTEM_NTSC;
        break;
      case 0x50: // 'P' Europe
        this.log("PAL (Europe)");
        system = this.TV_SYSTEM_PAL;
        break;
      case 0x53: //'S' Spain
        this.log("PAL (Spain)");
        system = this.TV_SYSTEM_PAL;
        break;
      case 0x55: // 'U' Australia
        this.log("PAL (Australia)");
        system = this.TV_SYSTEM_PAL;
        break;
      case 0x58: // 'X'
        this.log("PAL (X)");
        system = this.TV_SYSTEM_PAL;
        break;
      case 0x59: // 'Y' Australia
        this.log("PAL (Y Australia)");
        system = this.TV_SYSTEM_PAL;
        break;
      case 0x20:
      case 0x21:
      case 0x38:
      case 0x70:
        this.log("PAL 0x" + dec2hex(countryCode));
        system = this.TV_SYSTEM_PAL;
        break;
      default:
        this.log("Unknown TV System: " + dec2hex(countryCode) + ". Using PAL.");
        system = this.TV_SYSTEM_PAL;
    }
    return system;
  };

  C1964jsEmulator.prototype.getBootCode = function() {
    "use strict";
    var CIC_CRC, bootCode, cic, i;
    i = void 0;
    cic = 0;
    CIC_CRC = 0;
    i = 0;
    bootCode = {};
    while (i < 0xFC0) {
      CIC_CRC = CIC_CRC + this.memory.romUint8Array[0x40 + i];
      i += 1;
    }
    switch (CIC_CRC) {
      //CIC-NUS-6101 (starfox)
      case 0x33a27:
      case 0x3421e:
        this.log("Using CIC-NUS-6101 for starfox\n");
        bootCode.cic = 0x3f;
        bootCode.rdramSizeAddress = 0x318;
        break;
      case 0x34044: //CIC-NUS-6102 (mario)
        this.log("Using CIC-NUS-6102 for mario\n");
        bootCode.cic = 0x3f;
        bootCode.rdramSizeAddress = 0x318;
        break;
      case 0x357d0: //CIC-NUS-6103 (Banjo)
        this.log("Using CIC-NUS-6103 for Banjo\n");
        bootCode.cic = 0x78;
        bootCode.rdramSizeAddress = 0x318;
        break;
      case 0x47a81: //CIC-NUS-6105 (Zelda)
        this.log("Using CIC-NUS-6105 for Zelda\n");
        bootCode.cic = 0x91;
        bootCode.rdramSizeAddress = 0x3F0;
        break;
      case 0x371cc: //CIC-NUS-6106 (F-Zero X)
        this.log("Using CIC-NUS-6106 for F-Zero/Yoshi Story\n");
        bootCode.cic = 0x85;
        bootCode.rdramSizeAddress = 0x318;
        break;
      case 0x343c9: //F1 World Grand Prix
        this.log("Using Boot Code for F1 World Grand Prix\n");
        bootCode.cic = 0x85;
        bootCode.rdramSizeAddress = 0x3F0;
        break;
      default:
        this.log("Unknown boot code, using Mario boot code instead");
        bootCode.cic = 0x3f;
        bootCode.rdramSizeAddress = 0x318;
    }
    
    // Init_VI_Counter(game_country_tvsystem);
    return bootCode;
  };

}).call(this);
