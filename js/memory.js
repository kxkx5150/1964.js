// Generated by CoffeeScript 2.5.1
(function() {
  /*1964js - JavaScript/HTML5 port of 1964 - N64 emulator
  Copyright (C) 2012 Joel Middendorf

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.*/
  //segments must be at least 64KB in size for lookup table.
  const MEMORY_START_RDRAM = 0x00000000;
  const MEMORY_START_RAMREGS4 = 0x03F04000;
  const MEMORY_SIZE_RAMREGS4 = 0x10000;
  const MEMORY_START_RAMREGS0 = 0x03F00000;
  const MEMORY_START_RAMREGS8 = 0x03F80000;
  const MEMORY_SIZE_RAMREGS0 = 0x10000;
  const MEMORY_SIZE_RAMREGS8 = 0x10000;
  const MEMORY_START_SPMEM = 0x04000000;
  const MEMORY_START_SPREG_1 = 0x04040000;
  const MEMORY_START_SPREG_2 = 0x04080000;
  const MEMORY_START_DPC = 0x04100000;
  const MEMORY_START_DPS = 0x04200000;
  const MEMORY_START_MI = 0x04300000;
  const MEMORY_START_VI = 0x04400000;
  const MEMORY_START_AI = 0x04500000;
  const MEMORY_START_PI = 0x04600000;
  const MEMORY_START_RI = 0x04700000;
  const MEMORY_START_SI = 0x04800000;
  const MEMORY_START_C2A1 = 0x05000000;
  const MEMORY_START_C1A1 = 0x06000000;
  const MEMORY_START_C2A2 = 0x08000000;
  const MEMORY_START_ROM_IMAGE = 0x10000000;
  const MEMORY_START_GIO = 0x18000000;
  const MEMORY_START_C1A3 = 0x1FD00000;
  const MEMORY_START_DUMMY = 0x1FFF0000;
  const MEMORY_SIZE_SPMEM = 0x10000;
  const MEMORY_SIZE_SPREG_1 = 0x10000;
  const MEMORY_SIZE_SPREG_2 = 0x10000;
  const MEMORY_SIZE_DPC = 0x10000;
  const MEMORY_SIZE_DPS = 0x10000;
  const MEMORY_SIZE_MI = 0x10000;
  const MEMORY_SIZE_VI = 0x10000;
  const MEMORY_SIZE_AI = 0x10000;
  const MEMORY_SIZE_PI = 0x10000;
  const MEMORY_SIZE_RI = 0x10000;
  const MEMORY_SIZE_SI = 0x10000;
  const MEMORY_SIZE_C2A1 = 0x10000;
  const MEMORY_SIZE_C1A1 = 0x10000;
  const MEMORY_SIZE_C2A2 = 0x20000;
  const MEMORY_SIZE_GIO = 0x10000;
  const MEMORY_SIZE_C1A3 = 0x10000;
  const MEMORY_SIZE_DUMMY = 0x10000;
  const MEMORY_START_PIF = 0x1FC00000;
  const MEMORY_START_PIF_RAM = 0x1FC007C0;
  const MEMORY_SIZE_PIF = 0x10000;
  const MEMORY_SIZE_ROM = 0x4000000;
  var C1964jsMemory, root;

  C1964jsMemory = class C1964jsMemory {
    constructor(core) {
      this.core = core;
      /**
       * @const
       */
      this.romUint8Array = undefined; // set after rom is loaded.
      /**
       * @const
       */
      this.rom = undefined; // set after rom is loaded.
      /**
       * @const
       */
      this.ramArrayBuffer = new ArrayBuffer(0x800000);
      /**
       * @const
       */
      this.u8 = new Uint8Array(this.ramArrayBuffer); // RDRAM
      /**
       * @const
       */
      this.spMemUint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.spMemUint8Array = new Uint8Array(this.spMemUint8ArrayBuffer);
      /**
       * @const
       */
      this.spReg1Uint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.spReg1Uint8Array = new Uint8Array(this.spReg1Uint8ArrayBuffer);
      /**
       * @const
       */
      this.spReg2Uint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.spReg2Uint8Array = new Uint8Array(this.spReg2Uint8ArrayBuffer);
      /**
       * @const
       */
      this.dpcUint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.dpcUint8Array = new Uint8Array(this.dpcUint8ArrayBuffer);
      /**
       * @const
       */
      this.dpsUint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.dpsUint8Array = new Uint8Array(this.dpsUint8ArrayBuffer);
      /**
       * @const
       */
      this.miUint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.miUint8Array = new Uint8Array(this.miUint8ArrayBuffer);
      /**
       * @const
       */
      this.viUint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.viUint8Array = new Uint8Array(this.viUint8ArrayBuffer);
      /**
       * @const
       */
      this.aiUint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.aiUint8Array = new Uint8Array(this.aiUint8ArrayBuffer);
      /**
       * @const
       */
      this.piUint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.piUint8Array = new Uint8Array(this.piUint8ArrayBuffer);
      /**
       * @const
       */
      this.siUint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.siUint8Array = new Uint8Array(this.siUint8ArrayBuffer);
      /**
       * @const
       */
      this.c2a1Uint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.c2a1Uint8Array = new Uint8Array(this.c2a1Uint8ArrayBuffer);
      /**
       * @const
       */
      this.c1a1Uint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.c1a1Uint8Array = new Uint8Array(this.c1a1Uint8ArrayBuffer);
      /**
       * @const
       */
      this.c2a2Uint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.c2a2Uint8Array = new Uint8Array(this.c2a2Uint8ArrayBuffer);
      /**
       * @const
       */
      this.c1a3Uint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.c1a3Uint8Array = new Uint8Array(this.c1a3Uint8ArrayBuffer);
      /**
       * @const
       */
      this.riUint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.riUint8Array = new Uint8Array(this.riUint8ArrayBuffer);
      /**
       * @const
       */
      this.pifUint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.pifUint8Array = new Uint8Array(this.pifUint8ArrayBuffer);
      /**
       * @const
       */
      this.gioUint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.gioUint8Array = new Uint8Array(this.gioUint8ArrayBuffer);
      /**
       * @const
       */
      this.ramRegs0Uint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.ramRegs0Uint8Array = new Uint8Array(this.ramRegs0Uint8ArrayBuffer);
      /**
       * @const
       */
      this.ramRegs4Uint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.ramRegs4Uint8Array = new Uint8Array(this.ramRegs4Uint8ArrayBuffer);
      /**
       * @const
       */
      this.ramRegs8Uint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.ramRegs8Uint8Array = new Uint8Array(this.ramRegs8Uint8ArrayBuffer);
      /**
       * @const
       */
      this.dummyReadWriteUint8ArrayBuffer = new ArrayBuffer(0x10000);
      /**
       * @const
       */
      this.dummyReadWriteUint8Array = new Uint8Array(this.dummyReadWriteUint8ArrayBuffer);
      this.lengthy = 50325;
      /**
       * Load Byte
       * @type {!Array<!function(!C1964jsMemory, number): number>}
       * @const
       */
      this.LB = Array.apply(this.readDummy8, Array(this.lengthy));
      /**
       * Load Half
       * @type {!Array<!function(!C1964jsMemory, number): number>}
       * @const
       */
      this.LH = Array.apply(this.readDummy16, Array(this.lengthy));
      /**
       * Load Word
       * @type {!Array<!function(!C1964jsMemory, number): number>}
       * @const
       */
      this.LW = Array.apply(this.readDummy32, Array(this.lengthy));
      /**
       * Store byte
       * @type {!Array<!function(!C1964jsMemory, number, number)>}
       * @const
       */
      this.SB = Array.apply(this.writeDummy8, Array(this.lengthy));
      /**
       * Store Half
       * @type {!Array<!function(!C1964jsMemory, number, number)>}
       * @const
       */
      this.SH = Array.apply(this.writeDummy16, Array(this.lengthy));
      /**
       * Store Word
       * @type {!Array<!function(!C1964jsMemory, number, number)>}
       * @const
       */
      this.SW = Array.apply(this.writeDummy32, Array(this.lengthy));
      //todo: fix overlapping ramregs now that we are 0xffff in lut size instead of 0xfffc in lut size
      this.t = void 0;
      console.log("lengthy0 = " + this.lengthy);
      this.readDummy8 = (a) => {
        const off_ = a & 0xFFFC;
        return this.dummyReadWriteUint8Array[off_];
      };
      this.readDummy16 = (a) => {
        const off_ = a & 0xFFFC;
        return this.dummyReadWriteUint8Array[off_] << 8 | this.dummyReadWriteUint8Array[off_ + 1];
      };
      this.readDummy32 = (a) => {
        const off_ = a & 0xFFFC;
        return this.dummyReadWriteUint8Array[off_] << 24 | this.dummyReadWriteUint8Array[off_ + 1] << 16 | this.dummyReadWriteUint8Array[off_ + 2] << 8 | this.dummyReadWriteUint8Array[off_ + 3];
      };
      this.readRdram8 = (a) => {
        return this.u8[a];
      };
      this.readRdram16 = (a) => {
        const ram = this.u8;
        return ram[a] << 8 | ram[a + 1];
      };
      this.readRdram32 = (a) => {
        const ram = this.u8;
        return ram[a] << 24 | ram[a + 1] << 16 | ram[a + 2] << 8 | ram[a + 3];
      };
      this.readRamRegs0_8 = (a) => {
        const off_ = a - MEMORY_START_RAMREGS0;
        return this.ramRegs0Uint8Array[off_];
      };
      this.readRamRegs0_16 = (a) => {
        const off_ = (a-MEMORY_START_RAMREGS0);
        return this.ramRegs0Uint8Array[off_] << 8 | this.ramRegs0Uint8Array[off_ + 1];
      };
      this.readRamRegs0_32 = (a) => {
        const off_ = (a-MEMORY_START_RAMREGS0);
        return this.ramRegs0Uint8Array[off_] << 24 | this.ramRegs0Uint8Array[off_ + 1] << 16 | this.ramRegs0Uint8Array[off_ + 2] << 8 | this.ramRegs0Uint8Array[off_ + 3];
      };
      this.readRamRegs4_8 = (a) => {
        const off_ = a - MEMORY_START_RAMREGS4;
        return this.ramRegs4Uint8Array[off_];
      };
      this.readRamRegs4_16 = (a) => {
        const off_ = (a-MEMORY_START_RAMREGS4);
        return this.ramRegs4Uint8Array[off_] << 8 | this.ramRegs4Uint8Array[off_ + 1];
      };
      this.readRamRegs4_32 = (a) => {
        const off_ = (a-MEMORY_START_RAMREGS4);
        return this.ramRegs4Uint8Array[off_] << 24 | this.ramRegs4Uint8Array[off_ + 1] << 16 | this.ramRegs4Uint8Array[off_ + 2] << 8 | this.ramRegs4Uint8Array[off_ + 3];
      };
      this.readRamRegs8_8 = (a) => {
        const off_ = a - MEMORY_START_RAMREGS8;
        return this.ramRegs8Uint8Array[off_];
      };
      this.readRamRegs8_16 = (a) => {
        const off_ = (a-MEMORY_START_RAMREGS8);
        return this.ramRegs8Uint8Array[off_] << 8 | this.ramRegs8Uint8Array[off_ + 1];
      };
      this.readRamRegs8_32 = (a) => {
        const off_ = (a-MEMORY_START_RAMREGS8);
        return this.ramRegs8Uint8Array[off_] << 24 | this.ramRegs8Uint8Array[off_ + 1] << 16 | this.ramRegs8Uint8Array[off_ + 2] << 8 | this.ramRegs8Uint8Array[off_ + 3];
      };
      this.readSpMem8 = (a) => {
        const off_ = a - MEMORY_START_SPMEM;
        return this.spMemUint8Array[off_];
      };
      this.readSpMem16 = (a) => {
        const off_ = (a-MEMORY_START_SPMEM);
        return this.spMemUint8Array[off_] << 8 | this.spMemUint8Array[off_ + 1];
      };
      this.readSpMem32 = (a) => {
        const off_ = (a-MEMORY_START_SPMEM);
        return this.spMemUint8Array[off_] << 24 | this.spMemUint8Array[off_ + 1] << 16 | this.spMemUint8Array[off_ + 2] << 8 | this.spMemUint8Array[off_ + 3];
      };
      this.readSpReg1_8 = (a) => {
        const off_ = a - MEMORY_START_SPREG_1;
        return this.core.interrupts.readSPReg1(off_);
      };
      this.readSpReg1_16 = (a) => {
        const off_ = a - MEMORY_START_SPREG_1;
        return this.core.interrupts.readSPReg1(off_);
      };
      this.readSpReg1_32 = (a) => {
        const off_ = a - MEMORY_START_SPREG_1;
        return this.core.interrupts.readSPReg1(off_);
      };
      this.readSpReg2_8 = (a) => {
        const off_ = a - MEMORY_START_SPREG_2;
        return this.spReg2Uint8Array[off_];
      };
      this.readSpReg2_16 = (a) => {
        const off_ = (a-MEMORY_START_SPREG_2);
        return this.spReg2Uint8Array[off_] << 8 | this.spReg2Uint8Array[off_ + 1];
      };
      this.readSpReg2_32 = (a) => {
        const off_ = (a-MEMORY_START_SPREG_2);
        return this.spReg2Uint8Array[off_] << 24 | this.spReg2Uint8Array[off_ + 1] << 16 | this.spReg2Uint8Array[off_ + 2] << 8 | this.spReg2Uint8Array[off_ + 3];
      };
      this.readDpc8 = (a) => {
        const off_ = a - MEMORY_START_DPC;
        return this.dpcUint8Array[off_];
      };
      this.readDpc16 = (a) => {
        const off_ = (a-MEMORY_START_DPC);
        return this.dpcUint8Array[off_] << 8 | this.dpcUint8Array[off_ + 1];
      };
      this.readDpc32 = (a) => {
        const off_ = (a-MEMORY_START_DPC);
        return this.dpcUint8Array[off_] << 24 | this.dpcUint8Array[off_ + 1] << 16 | this.dpcUint8Array[off_ + 2] << 8 | this.dpcUint8Array[off_ + 3];
      };
      this.readDps8 = (a) => {
        const off_ = a - MEMORY_START_DPS;
        return this.dpsUint8Array[off_];
      };
      this.readDps16 = (a) => {
        const off_ = (a-MEMORY_START_DPS);
        return this.dpsUint8Array[off_] << 8 | this.dpsUint8Array[off_ + 1];
      };
      this.readDps32 = (a) => {
        const off_ = (a-MEMORY_START_DPS);
        return this.dpsUint8Array[off_] << 24 | this.dpsUint8Array[off_ + 1] << 16 | this.dpsUint8Array[off_ + 2] << 8 | this.dpsUint8Array[off_ + 3];
      };
      this.readMi8 = (a) => {
        const off_ = a - MEMORY_START_MI;
        return this.miUint8Array[off_];
      };
      this.readMi16 = (a) => {
        const off_ = (a-MEMORY_START_MI);
        return this.miUint8Array[off_] << 8 | this.miUint8Array[off_ + 1];
      };
      this.readMi32 = (a) => {
        const off_ = (a-MEMORY_START_MI);
        return this.miUint8Array[off_] << 24 | this.miUint8Array[off_ + 1] << 16 | this.miUint8Array[off_ + 2] << 8 | this.miUint8Array[off_ + 3];
      };
      this.readVi8 = (a) => {
        const off_ = a - MEMORY_START_VI;
        return this.core.interrupts.readVI(off_);
      };
      this.readVi16 = (a) => {
        const off_ = a - MEMORY_START_VI;
        return this.core.interrupts.readVI(off_);
      };
      this.readVi32 = (a) => {
        const off_ = a - MEMORY_START_VI;
        return this.core.interrupts.readVI(off_);
      };
      this.readAi8 = (a) => {
        const off_ = a - MEMORY_START_AI;
        return this.core.interrupts.readAI(off_);
      };
      this.readAi16 = (a) => {
        const off_ = a - MEMORY_START_AI;
        return this.core.interrupts.readAI(off_);
      };
      this.readAi32 = (a) => {
        const off_ = a - MEMORY_START_AI;
        return this.core.interrupts.readAI(off_);
      };
      this.readPi8 = (a) => {
        const off_ = a - MEMORY_START_PI;
        return this.piUint8Array[off_];
      };
      this.readPi16 = (a) => {
        const off_ = (a-MEMORY_START_PI);
        return this.piUint8Array[off_] << 8 | this.piUint8Array[off_ + 1];
      };
      this.readPi32 = (a) => {
        const off_ = (a-MEMORY_START_PI);
        return this.piUint8Array[off_] << 24 | this.piUint8Array[off_ + 1] << 16 | this.piUint8Array[off_ + 2] << 8 | this.piUint8Array[off_ + 3];
      };
      this.readSi8 = (a) => {
        const off_ = a - MEMORY_START_SI;
        return this.core.interrupts.readSI(off_);
      };
      this.readSi16 = (a) => {
        const off_ = a - MEMORY_START_SI;
        return this.core.interrupts.readSI(off_);
      };
      this.readSi32 = (a) => {
        const off_ = a - MEMORY_START_SI;
        return this.core.interrupts.readSI(off_);
      };
      this.readC2A1_8 = (a) => {
        const off_ = a - MEMORY_START_C2A1;
        return this.c2a1Uint8Array[off_];
      };
      this.readC2A1_16 = (a) => {
        const off_ = (a-MEMORY_START_C2A1);
        return this.c2a1Uint8Array[off_] << 8 | this.c2a1Uint8Array[off_ + 1];
      };
      this.readC2A1_32 = (a) => {
        const off_ = (a-MEMORY_START_C2A1);
        return this.c2a1Uint8Array[off_] << 24 | this.c2a1Uint8Array[off_ + 1] << 16 | this.c2a1Uint8Array[off_ + 2] << 8 | this.c2a1Uint8Array[off_ + 3];
      };
      this.readC1A1_8 = (a) => {
        const off_ = a - MEMORY_START_C1A1;
        return this.c1a1Uint8Array[off_];
      };
      this.readC1A1_16 = (a) => {
        const off_ = (a-MEMORY_START_C1A1);
        return this.c1a1Uint8Array[off_] << 8 | this.c1a1Uint8Array[off_ + 1];
      };
      this.readC1A1_32 = (a) => {
        const off_ = (a-MEMORY_START_C1A1);
        return this.c1a1Uint8Array[off_] << 24 | this.c1a1Uint8Array[off_ + 1] << 16 | this.c1a1Uint8Array[off_ + 2] << 8 | this.c1a1Uint8Array[off_ + 3];
      };
      this.readC2A2_8 = (a) => {
        const off_ = a - MEMORY_START_C2A2;
        return this.c2a2Uint8Array[off_];
      };
      this.readC2A2_16 = (a) => {
        const off_ = (a-MEMORY_START_C2A2);
        return this.c2a2Uint8Array[off_] << 8 | this.c2a2Uint8Array[off_ + 1];
      };
      this.readC2A2_32 = (a) => {
        const off_ = (a-MEMORY_START_C2A2);
        return this.c2a2Uint8Array[off_] << 24 | this.c2a2Uint8Array[off_ + 1] << 16 | this.c2a2Uint8Array[off_ + 2] << 8 | this.c2a2Uint8Array[off_ + 3];
      };
      this.readRom8 = (a) => {
        const off_ = a - MEMORY_START_ROM_IMAGE;
        return this.romUint8Array[off_];
      };
      this.readRom16 = (a) => {
        const off_ = (a-MEMORY_START_ROM_IMAGE);
        return this.romUint8Array[off_] << 8 | this.romUint8Array[off_ + 1];
      };
      this.readRom32 = (a) => {
        const off_ = (a-MEMORY_START_ROM_IMAGE);
        return this.romUint8Array[off_] << 24 | this.romUint8Array[off_ + 1] << 16 | this.romUint8Array[off_ + 2] << 8 | this.romUint8Array[off_ + 3];
      };
      this.readC1A3_8 = (a) => {
        const off_ = a - MEMORY_START_C1A3;
        return this.c1a3Uint8Array[off_];
      };
      this.readC1A3_16 = (a) => {
        const off_ = (a-MEMORY_START_C1A3);
        return this.c1a3Uint8Array[off_] << 8 | this.c1a3Uint8Array[off_ + 1];
      };
      this.readC1A3_32 = (a) => {
        const off_ = (a-MEMORY_START_C1A3);
        return this.c1a3Uint8Array[off_] << 24 | this.c1a3Uint8Array[off_ + 1] << 16 | this.c1a3Uint8Array[off_ + 2] << 8 | this.c1a3Uint8Array[off_ + 3];
      };
      this.readRi8 = (a) => {
        const off_ = a - MEMORY_START_RI;
        return this.riUint8Array[off_];
      };
      this.readRi16 = (a) => {
        const off_ = (a-MEMORY_START_RI);
        return this.riUint8Array[off_] << 8 | this.riUint8Array[off_ + 1];
      };
      this.readRi32 = (a) => {
        const off_ = (a-MEMORY_START_RI);
        return this.riUint8Array[off_] << 24 | this.riUint8Array[off_ + 1] << 16 | this.riUint8Array[off_ + 2] << 8 | this.riUint8Array[off_ + 3];
      };
      this.readPif8 = (a) => {
        const off_ = a - MEMORY_START_PIF;
        return this.pifUint8Array[off_];
      };
      this.readPif16 = (a) => {
        const off_ = (a-MEMORY_START_PIF);
        return this.pifUint8Array[off_] << 8 | this.pifUint8Array[off_ + 1];
      };
      this.readPif32 = (a) => {
        const off_ = (a-MEMORY_START_PIF);
        return this.pifUint8Array[off_] << 24 | this.pifUint8Array[off_ + 1] << 16 | this.pifUint8Array[off_ + 2] << 8 | this.pifUint8Array[off_ + 3];
      };
      this.readGio8 = (a) => {
        const off_ = a - MEMORY_START_GIO;
        return this.gioUint8Array[off_];
      };
      this.readGio16 = (a) => {
        const off_ = (a-MEMORY_START_GIO);
        return this.gioUint8Array[off_] << 8 | this.gioUint8Array[off_ + 1];
      };
      this.readGio32 = (a) => {
        const off_ = (a-MEMORY_START_GIO);
        return this.gioUint8Array[off_] << 24 | this.gioUint8Array[off_ + 1] << 16 | this.gioUint8Array[off_ + 2] << 8 | this.gioUint8Array[off_ + 3];
      };
      this.writeRdram8 = (val, a) => {
        this.u8[a] = val;
      };
      this.writeRdram16 = (val, a) => {
        const ram = this.u8;
        ram[a] = val >> 8;
        ram[a + 1] = val;
      };
      this.writeRdram32 = (val, a) => {
        const ram = this.u8;
        ram[a] = val >> 24;
        ram[a + 1] = val >> 16;
        ram[a + 2] = val >> 8;
        ram[a + 3] = val;
      };
      this.writeSpMem8 = (val, a) => {
        const off_ = a - MEMORY_START_SPMEM;
        this.spMemUint8Array[off_] = val;
      };
      this.writeSpMem16 = (val, a) => {
        const off_ = a - MEMORY_START_SPMEM;
        this.spMemUint8Array[off_] = val >> 8;
        this.spMemUint8Array[off_ + 1] = val;
      };
      this.writeSpMem32 = (val, a) => {
        const off_ = a - MEMORY_START_SPMEM;
        const mem = this.spMemUint8Array;
        mem[off_] = val >> 24;
        mem[off_ + 1] = val >> 16;
        mem[off_ + 2] = val >> 8;
        mem[off_ + 3] = val;
      };
      this.writeRi8 = (val, a) => {
        const off_ = a - MEMORY_START_RI;
        this.riUint8Array[off_] = val;
      };
      this.writeRi16 = (val, a) => {
        const off_ = a - MEMORY_START_RI;
        this.riUint8Array[off_] = val >> 8;
        this.riUint8Array[off_ + 1] = val;
      };
      this.writeRi32 = (val, a) => {
        const off_ = a - MEMORY_START_RI;
        this.riUint8Array[off_] = val >> 24;
        this.riUint8Array[off_ + 1] = val >> 16;
        this.riUint8Array[off_ + 2] = val >> 8;
        this.riUint8Array[off_ + 3] = val;
      };
      this.writeMi8 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_MI;
        this.core.interrupts.writeMI(off_, val, pc, isDelaySlot);
      };
      this.writeMi16 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_MI;
        this.core.interrupts.writeMI(off_, val, pc, isDelaySlot);
      };
      this.writeMi32 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_MI;
        this.core.interrupts.writeMI(off_, val, pc, isDelaySlot);
      };
      this.writeRamRegs8_8 = (val, a) => {
        const off_ = a - MEMORY_START_RAMREGS8;
        this.ramRegs8Uint8Array[off_] = val;
      };
      this.writeRamRegs8_16 = (val, a) => {
        const off_ = a - MEMORY_START_RAMREGS8;
        this.ramRegs8Uint8Array[off_] = val >> 8;
        this.ramRegs8Uint8Array[off_ + 1] = val;
      };
      this.writeRamRegs8_32 = (val, a) => {
        const off_ = a - MEMORY_START_RAMREGS8;
        this.ramRegs8Uint8Array[off_] = val >> 24;
        this.ramRegs8Uint8Array[off_ + 1] = val >> 16;
        this.ramRegs8Uint8Array[off_ + 2] = val >> 8;
        this.ramRegs8Uint8Array[off_ + 3] = val;
      };
      this.writeRamRegs4_8 = (val, a) => {
        const off_ = a - MEMORY_START_RAMREGS4;
        this.ramRegs4Uint8Array[off_] = val;
      };
      this.writeRamRegs4_16 = (val, a) => {
        const off_ = a - MEMORY_START_RAMREGS4;
        this.ramRegs4Uint8Array[off_] = val >> 8;
        this.ramRegs4Uint8Array[off_ + 1] = val;
      };
      this.writeRamRegs4_32 = (val, a) => {
        const off_ = a - MEMORY_START_RAMREGS4;
        this.ramRegs4Uint8Array[off_] = val >> 24;
        this.ramRegs4Uint8Array[off_ + 1] = val >> 16;
        this.ramRegs4Uint8Array[off_ + 2] = val >> 8;
        this.ramRegs4Uint8Array[off_ + 3] = val;
      };
      this.writeRamRegs0_8 = (val, a) => {
        const off_ = a - MEMORY_START_RAMREGS0;
        this.ramRegs0Uint8Array[off_] = val;
      };
      this.writeRamRegs0_16 = (val, a) => {
        const off_ = a - MEMORY_START_RAMREGS0;
        this.ramRegs0Uint8Array[off_] = val >> 8;
        this.ramRegs0Uint8Array[off_ + 1] = val;
      };
      this.writeRamRegs0_32 = (val, a) => {
        const off_ = a - MEMORY_START_RAMREGS0;
        this.ramRegs0Uint8Array[off_] = val >> 24;
        this.ramRegs0Uint8Array[off_ + 1] = val >> 16;
        this.ramRegs0Uint8Array[off_ + 2] = val >> 8;
        this.ramRegs0Uint8Array[off_ + 3] = val;
      };
      this.writeSpReg1_8 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_SPREG_1;
        this.core.interrupts.writeSPReg1(off_, val, pc, isDelaySlot);
      };
      this.writeSpReg1_16 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_SPREG_1;
        this.core.interrupts.writeSPReg1(off_, val, pc, isDelaySlot);
      };
      this.writeSpReg1_32 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_SPREG_1;
        this.core.interrupts.writeSPReg1(off_, val, pc, isDelaySlot);
      };
      this.writePi8 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_PI;
        this.core.interrupts.writePI(off_, val, pc, isDelaySlot);
      };
      this.writePi16 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_PI;
        this.core.interrupts.writePI(off_, val, pc, isDelaySlot);
      };
      this.writePi32 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_PI;
        this.core.interrupts.writePI(off_, val, pc, isDelaySlot);
      };
      this.writeSi8 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_SI;
        this.core.interrupts.writeSI(off_, val, pc, isDelaySlot);
      };
      this.writeSi16 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_SI;
        this.core.interrupts.writeSI(off_, val, pc, isDelaySlot);
      };
      this.writeSi32 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_SI;
        this.core.interrupts.writeSI(off_, val, pc, isDelaySlot);
      };
      this.writeAi8 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_AI;
        this.core.interrupts.writeAI(off_, val, pc, isDelaySlot);
      };
      this.writeAi16 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_AI;
        this.core.interrupts.writeAI(off_, val, pc, isDelaySlot);
      };
      this.writeAi32 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_AI;
        this.core.interrupts.writeAI(off_, val, pc, isDelaySlot);
      };
      this.writeVi8 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_VI;
        this.core.interrupts.writeVI(off_, val, pc, isDelaySlot);
      };
      this.writeVi16 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_VI;
        this.core.interrupts.writeVI(off_, val, pc, isDelaySlot);
      };
      this.writeVi32 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_VI;
        this.core.interrupts.writeVI(off_, val, pc, isDelaySlot);
      };
      this.writeSpReg2_8 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_SPREG_2;
        this.core.interrupts.writeSPReg2(off_, val, pc, isDelaySlot);
      };
      this.writeSpReg2_16 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_SPREG_2;
        this.core.interrupts.writeSPReg2(off_, val, pc, isDelaySlot);
      };
      this.writeSpReg2_32 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_SPREG_2;
        this.core.interrupts.writeSPReg2(off_, val, pc, isDelaySlot);
      };
      this.writeDpc8 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_DPC;
        this.core.interrupts.writeDPC(off_, val, pc, isDelaySlot);
      };
      this.writeDpc16 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_DPC;
        this.core.interrupts.writeDPC(off_, val, pc, isDelaySlot);
      };
      this.writeDpc32 = (val, a, pc, isDelaySlot) => {
        const off_ = a - MEMORY_START_DPC;
        this.core.interrupts.writeDPC(off_, val, pc, isDelaySlot);
      };
      this.writeDps8 = (val, a) => {
        const off_ = a - MEMORY_START_DPS;
        this.dpsUint8Array[off_] = val;
      };
      this.writeDps16 = (val, a) => {
        const off_ = a - MEMORY_START_DPS;
        this.dpsUint8Array[off_] = val >> 8;
        this.dpsUint8Array[off_ + 1] = val;
      };
      this.writeDps32 = (val, a) => {
        const off_ = a - MEMORY_START_DPS;
        this.dpsUint8Array[off_] = val >> 24;
        this.dpsUint8Array[off_ + 1] = val >> 16;
        this.dpsUint8Array[off_ + 2] = val >> 8;
        this.dpsUint8Array[off_ + 3] = val;
      };
      this.writeC2A1_8 = (val, a) => {
        const off_ = a - MEMORY_START_C2A1;
        this.c2a1Uint8Array[off_] = val;
      };
      this.writeC2A1_16 = (val, a) => {
        const off_ = a - MEMORY_START_C2A1;
        this.c2a1Uint8Array[off_] = val >> 8;
        this.c2a1Uint8Array[off_ + 1] = val;
      };
      this.writeC2A1_32 = (val, a) => {
        const off_ = a - MEMORY_START_C2A1;
        this.c2a1Uint8Array[off_] = val >> 24;
        this.c2a1Uint8Array[off_ + 1] = val >> 16;
        this.c2a1Uint8Array[off_ + 2] = val >> 8;
        this.c2a1Uint8Array[off_ + 3] = val;
      };
      this.writeC1A1_8 = (val, a) => {
        const off_ = a - MEMORY_START_C1A1;
        this.c1a1Uint8Array[off_] = val;
      };
      this.writeC1A1_16 = (val, a) => {
        const off_ = a - MEMORY_START_C1A1;
        this.c1a1Uint8Array[off_] = val >> 8;
        this.c1a1Uint8Array[off_ + 1] = val;
      };
      this.writeC1A1_32 = (val, a) => {
        const off_ = a - MEMORY_START_C1A1;
        this.c1a1Uint8Array[off_] = val >> 24;
        this.c1a1Uint8Array[off_ + 1] = val >> 16;
        this.c1a1Uint8Array[off_ + 2] = val >> 8;
        this.c1a1Uint8Array[off_ + 3] = val;
      };
      this.writeC2A2_8 = (val, a) => {
        const off_ = a - MEMORY_START_C2A2;
        this.c2a2Uint8Array[off_] = val;
      };
      this.writeC2A2_16 = (val, a) => {
        const off_ = a - MEMORY_START_C2A2;
        this.c2a2Uint8Array[off_] = val >> 8;
        this.c2a2Uint8Array[off_ + 1] = val;
      };
      this.writeC2A2_32 = (val, a) => {
        const off_ = a - MEMORY_START_C2A2;
        this.c2a2Uint8Array[off_] = val >> 24;
        this.c2a2Uint8Array[off_ + 1] = val >> 16;
        this.c2a2Uint8Array[off_ + 2] = val >> 8;
        this.c2a2Uint8Array[off_ + 3] = val;
      };
      this.writeRom8 = (val, a) => {
        alert("attempt to overwrite rom!");
      };
      // `const off_ = a - MEMORY_START_ROM_IMAGE`
      // @romUint8Array[off_] = val
      this.writeRom16 = (val, a) => {
        alert("attempt to overwrite rom!");
      };
      // `const off_ = a - MEMORY_START_ROM_IMAGE`
      // @romUint8Array[off_] = val >> 8
      // @romUint8Array[off_ + 1] = val
      this.writeRom32 = (val, a) => {
        alert("attempt to overwrite rom!");
      };
      // `const off_ = a - MEMORY_START_ROM_IMAGE`
      // @romUint8Array[off_] = val >> 24
      // @romUint8Array[off_ + 1] = val >> 16
      // @romUint8Array[off_ + 2] = val >> 8
      // @romUint8Array[off_ + 3] = val
      this.writeC1A3_8 = (val, a) => {
        const off_ = a - MEMORY_START_C1A3;
        this.c1a3Uint8Array[off_] = val;
      };
      this.writeC1A3_16 = (val, a) => {
        const off_ = a - MEMORY_START_C1A3;
        this.c1a3Uint8Array[off_] = val >> 8;
        this.c1a3Uint8Array[off_ + 1] = val;
      };
      this.writeC1A3_32 = (val, a) => {
        const off_ = a - MEMORY_START_C1A3;
        this.c1a3Uint8Array[off_] = val >> 24;
        this.c1a3Uint8Array[off_ + 1] = val >> 16;
        this.c1a3Uint8Array[off_ + 2] = val >> 8;
        this.c1a3Uint8Array[off_ + 3] = val;
      };
      this.writePif8 = (val, a) => {
        const off_ = a - MEMORY_START_PIF;
        this.pifUint8Array[off_] = val;
      };
      this.writePif16 = (val, a) => {
        const off_ = a - MEMORY_START_PIF;
        this.pifUint8Array[off_] = val >> 8;
        this.pifUint8Array[off_ + 1] = val;
      };
      this.writePif32 = (val, a) => {
        const off_ = a - MEMORY_START_PIF;
        this.pifUint8Array[off_] = val >> 24;
        this.pifUint8Array[off_ + 1] = val >> 16;
        this.pifUint8Array[off_ + 2] = val >> 8;
        this.pifUint8Array[off_ + 3] = val;
      };
      this.writeGio8 = (val, a) => {
        const off_ = a - MEMORY_START_GIO;
        this.gioUint8Array[off_] = val;
      };
      this.writeGio16 = (val, a) => {
        const off_ = a - MEMORY_START_GIO;
        this.gioUint8Array[off_] = val >> 8;
        this.gioUint8Array[off_ + 1] = val;
      };
      this.writeGio32 = (val, a) => {
        const off_ = a - MEMORY_START_GIO;
        this.gioUint8Array[off_] = val >> 24;
        this.gioUint8Array[off_ + 1] = val >> 16;
        this.gioUint8Array[off_ + 2] = val >> 8;
        this.gioUint8Array[off_ + 3] = val;
      };
      this.writeDummy8 = (val, a) => {
        //log "writing to invalid memory at " + dec2hex(a)
        const off_ = a & 0x0000fffc;
        this.dummyReadWriteUint8Array[off_] = val;
      };
      this.writeDummy16 = (val, a) => {
        const off_ = a & 0x0000fffc;
        this.dummyReadWriteUint8Array[off_] = val >> 8;
        this.dummyReadWriteUint8Array[off_ + 1] = val;
      };
      this.writeDummy32 = (val, a) => {
        const off_ = a & 0x0000fffc;
        this.dummyReadWriteUint8Array[off_] = val >> 24;
        this.dummyReadWriteUint8Array[off_ + 1] = val >> 16;
        this.dummyReadWriteUint8Array[off_ + 2] = val >> 8;
        this.dummyReadWriteUint8Array[off_ + 3] = val;
      };
      this.virtualToPhysical = (a) => {
        //uncomment to see where we're loading/storing
        //if ((((a & 0xF0000000)>>>0) isnt 0x80000000) and (((a & 0xF0000000)>>>0) isnt 0xA0000000))
        //  alert(dec2hex(a))

        //uncomment to verify non-tlb lookup.
        //if dec2hex(a) != dec2hex(((@t[a>>>12]<<16) | a&0x0000ffff))
        //  alert dec2hex(a) + ' ' + dec2hex(((@t[a>>>12]<<16) | a&0x0000ffff))
        return (this.t[a >>> 12] << 18 >>> 2) | (a & 0x0000ffff); // removes the upper-2 bits to support kseg mirrors
      };
      this.readTLB8 = (b) => {
        const a = this.virtualToPhysical(b);
        var region;
        region = this.LB[a >>> 16];
        if (region === this.readTLB8) {
          region = this.readDummy8;
        }
        return region(a);
      };
      this.writeTLB8 = (val, b, pc, isDelaySlot) => {
        const a = this.virtualToPhysical(b);
        var region;
        region = this.SB[a >>> 16];
        if (region === this.writeTLB8) {
          region = this.writeDummy8;
        }
        region(val, a, pc, isDelaySlot);
      };
      this.readTLB16 = (b) => {
        const a = this.virtualToPhysical(b);
        var region;
        region = this.LH[a >>> 16];
        if (region === this.readTLB16) {
          region = this.readDummy16;
        }
        return region(a);
      };
      this.writeTLB16 = (val, b, pc, isDelaySlot) => {
        const a = this.virtualToPhysical(b);
        var region;
        region = this.SH[a >>> 16];
        if (region === this.writeTLB16) {
          region = this.writeDummy16;
        }
        region(val, a, pc, isDelaySlot);
      };
      this.readTLB32 = (b) => {
        const a = this.virtualToPhysical(b);
        var region;
        region = this.LW[a >>> 16];
        if (region === this.readTLB32) {
          region = this.readDummy32;
        }
        return region(a);
      };
      this.writeTLB32 = (val, b, pc, isDelaySlot) => {
        const a = this.virtualToPhysical(b);
        var region;
        region = this.SW[a >>> 16];
        if (region === this.writeTLB32) {
          region = this.writeDummy32;
        }
        region(val, a, pc, isDelaySlot);
      };
      return;
    }

    initRegions() {
      this.initRegion(0, 0x80000000, this.readTLB8, this.writeTLB8, this.readTLB16, this.writeTLB16, this.readTLB32, this.writeTLB32);
      this.initRegion(0x80000000, 0x40000000, this.readDummy8, this.writeDummy8, this.readDummy16, this.writeDummy16, this.readDummy32, this.writeDummy32);
      this.initRegion(0xC0000000, 0x40000000, this.readTLB8, this.writeTLB8, this.readTLB16, this.writeTLB16, this.readTLB32, this.writeTLB32);
      this.initRegion(MEMORY_START_RDRAM, this.core.getRdramSize(), this.readRdram8, this.writeRdram8, this.readRdram16, this.writeRdram16, this.readRdram32, this.writeRdram32);
      this.initRegion(MEMORY_START_RAMREGS4, MEMORY_SIZE_RAMREGS4, this.readRamRegs4_8, this.writeRamRegs4_8, this.readRamRegs4_16, this.writeRamRegs4_16, this.readRamRegs4_32, this.writeRamRegs4_32);
      this.initRegion(MEMORY_START_SPMEM, MEMORY_SIZE_SPMEM, this.readSpMem8, this.writeSpMem8, this.readSpMem16, this.writeSpMem16, this.readSpMem32, this.writeSpMem32);
      this.initRegion(MEMORY_START_SPREG_1, MEMORY_SIZE_SPREG_1, this.readSpReg1_8, this.writeSpReg1_8, this.readSpReg1_16, this.writeSpReg1_16, this.readSpReg1_32, this.writeSpReg1_32);
      this.initRegion(MEMORY_START_SPREG_2, MEMORY_SIZE_SPREG_2, this.readSpReg2_8, this.writeSpReg2_8, this.readSpReg2_16, this.writeSpReg2_16, this.readSpReg2_32, this.writeSpReg2_32);
      this.initRegion(MEMORY_START_DPC, MEMORY_SIZE_DPC, this.readDpc8, this.writeDpc8, this.readDpc16, this.writeDpc16, this.readDpc32, this.writeDpc32);
      this.initRegion(MEMORY_START_DPS, MEMORY_SIZE_DPS, this.readDps8, this.writeDps8, this.readDps16, this.writeDps16, this.readDps32, this.writeDps32);
      this.initRegion(MEMORY_START_MI, MEMORY_SIZE_MI, this.readMi8, this.writeMi8, this.readMi16, this.writeMi16, this.readMi32, this.writeMi32);
      this.initRegion(MEMORY_START_VI, MEMORY_SIZE_VI, this.readVi8, this.writeVi8, this.readVi16, this.writeVi16, this.readVi32, this.writeVi32);
      this.initRegion(MEMORY_START_AI, MEMORY_SIZE_AI, this.readAi8, this.writeAi8, this.readAi16, this.writeAi16, this.readAi32, this.writeAi32);
      this.initRegion(MEMORY_START_PI, MEMORY_SIZE_PI, this.readPi8, this.writePi8, this.readPi16, this.writePi16, this.readPi32, this.writePi32);
      this.initRegion(MEMORY_START_SI, MEMORY_SIZE_SI, this.readSi8, this.writeSi8, this.readSi16, this.writeSi16, this.readSi32, this.writeSi32);
      this.initRegion(MEMORY_START_C2A1, MEMORY_SIZE_C2A1, this.readC2A1_8, this.writeC2A1_8, this.readC2A1_16, this.writeC2A1_16, this.readC2A1_32, this.writeC2A1_32);
      this.initRegion(MEMORY_START_C1A1, MEMORY_SIZE_C1A1, this.readC1A1_8, this.writeC1A1_8, this.readC1A1_16, this.writeC1A1_16, this.readC1A1_32, this.writeC1A1_32);
      this.initRegion(MEMORY_START_C2A2, MEMORY_SIZE_C2A2, this.readC2A2_8, this.writeC2A2_8, this.readC2A2_16, this.writeC2A2_16, this.readC2A2_32, this.writeC2A2_32);
      this.initRegion(MEMORY_START_ROM_IMAGE, MEMORY_SIZE_ROM, this.readRom8, this.writeRom8, this.readRom16, this.writeRom16, this.readRom32, this.writeRom32); //todo: could be a problem to use romLength
      this.initRegion(MEMORY_START_C1A3, MEMORY_SIZE_C1A3, this.readC1A3_8, this.writeC1A3_8, this.readC1A3_16, this.writeC1A3_16, this.readC1A3_32, this.writeC1A3_32);
      this.initRegion(MEMORY_START_RI, MEMORY_SIZE_RI, this.readRi8, this.writeRi8, this.readRi16, this.writeRi16, this.readRi32, this.writeRi32);
      this.initRegion(MEMORY_START_PIF, MEMORY_SIZE_PIF, this.readPif8, this.writePif8, this.readPif16, this.writePif16, this.readPif32, this.writePif32);
      this.initRegion(MEMORY_START_GIO, MEMORY_SIZE_GIO, this.readGio8, this.writeGio8, this.readGio16, this.writeGio16, this.readGio32, this.writeGio32);
      this.initRegion(MEMORY_START_RAMREGS0, MEMORY_SIZE_RAMREGS0, this.readRamRegs0_8, this.writeRamRegs0_8, this.readRamRegs0_16, this.writeRamRegs0_16, this.readRamRegs0_32, this.writeRamRegs0_32);
      return this.initRegion(MEMORY_START_RAMREGS8, MEMORY_SIZE_RAMREGS8, this.readRamRegs8_8, this.writeRamRegs8_8, this.readRamRegs8_16, this.writeRamRegs8_16, this.readRamRegs8_32, this.writeRamRegs8_32);
    }

    initRegion(start, size, LB, SB, readLH, SH, readLW, SW) {
      var end;
      end = (start + size) >>> 16;
      start >>>= 16;
      while (start < end) {
        this.LB[start] = LB;
        this.LH[start] = readLH;
        this.LW[start] = readLW;
        this.SB[start] = SB;
        this.SH[start] = SH;
        this.SW[start] = SW;
        start++;
      }
    }

    //@lengthy++
    initts() {
      var i;
      //Initialize the TLB Lookup Table
      this.t = new Int16Array(0x100000);
      i = 0;
      //todo: replace with call to buildTLBHelper clear
      while (i < 0x100000) {
        this.t[i] = (i & 0x1ffff) >>> 4;
        i++;
      }
    }

    //getInt32 and getUint32 are identical. they both return signed.
    getInt32(uregion, off_) {
      return uregion[off_] << 24 | uregion[off_ + 1] << 16 | uregion[off_ + 2] << 8 | uregion[off_ + 3];
    }

    getUint32(uregion, off_) {
      return uregion[off_] << 24 | uregion[off_ + 1] << 16 | uregion[off_ + 2] << 8 | uregion[off_ + 3];
    }

    setInt32(uregion, off_, val) {
      uregion[off_] = val >> 24;
      uregion[off_ + 1] = val >> 16;
      uregion[off_ + 2] = val >> 8;
      uregion[off_ + 3] = val;
    }

    setUint32(uregion, off_, val) {
      uregion[off_] = val >> 24;
      uregion[off_ + 1] = val >> 16;
      uregion[off_ + 2] = val >> 8;
      uregion[off_ + 3] = val;
    }

    lb(addr) {
      //throw Error "todo: mirrored load address"  if (addr & 0xff000000) is 0x84000000
      const a = this.virtualToPhysical(addr);
      return this.LB[a >>> 16](a);
    }

    lh(addr) {
      //throw Error "todo: mirrored load address"  if (addr & 0xff000000) is 0x84000000
      const a = this.virtualToPhysical(addr)&0x3fffffff;
      return this.LH[a >>> 16](a);
    }

    lw(addr) {
      //throw Error "todo: mirrored load address"  if (addr & 0xff000000) is 0x84000000
      const a = this.virtualToPhysical(addr);
      return this.LW[a >>> 16](a);
    }

    sw(val, addr, pc, isDelaySlot) {
      //throw Error "todo: mirrored load address"  if (addr & 0xff000000) is 0x84000000
      const a = this.virtualToPhysical(addr);
      this.SW[a >>> 16](val, a, pc, isDelaySlot);
    }

    //Same routine as storeWord, but store a byte
    sb(val, addr, pc, isDelaySlot) {
      //throw Error "todo: mirrored load address"  if (addr & 0xff000000) is 0x84000000
      const a = this.virtualToPhysical(addr);
      this.SB[a >>> 16](val, a, pc, isDelaySlot);
    }

    sh(val, addr, pc, isDelaySlot) {
      //throw Error "todo: mirrored load address"  if (addr & 0xff000000) is 0x84000000
      const a = this.virtualToPhysical(addr);
      this.SH[a >>> 16](val, a, pc, isDelaySlot);
    }

  };

  //hack global space until we export classes properly
  //node.js uses exports; browser uses this (window)
  root = typeof exports !== "undefined" && exports !== null ? exports : self;

  root.C1964jsMemory = C1964jsMemory;

}).call(this);
