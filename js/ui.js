// Generated by CoffeeScript 2.5.1
(function() {
  /*1964js - JavaScript/HTML5 port of 1964 - N64 emulator
  Copyright (C) 2012 Joel Middendorf

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.*/
  var abortRead, alertMessage, errorHandler, g_settings, getUrlVars, handleFileSelect, hideUserPanel, initTryCatch, reader, showUserPanel, showValue, toggleUi, uncompressAndRun, updateProgress;

  //todo: refactor ui.coffee to remove @ globals.
  g_settings = void 0;

  reader = void 0;

  this.progress = document.querySelector(".percent");

  alertMessage = "";

  if (!self.File) {
    alertMessage += " self.File";
  } else if (!self.FileReader) {
    alertMessage += " self.FileReader";
  } else if (!self.FileList) {
    alertMessage += " self.FileList";
  } else {
    if (!self.Blob) {
      alertMessge += " self.Blob";
    }
  }

  if (alertMessage.length > 0) {
    log("Unsupported in this browser: " + alertMessage);
  }

  this.i1964js = void 0;

  showValue = function(newValue) {
    var c, ctx;
    document.getElementById("range").innerHTML = newValue;
    c = document.getElementById("DebugCanvas");
    ctx = c.getContext("2d");
    if (ImDat2) {
      repaint(ctx, ImDat2, newValue | 0);
    }
  };

  // Read a page's GET URL variables and return them as an associative array.
  getUrlVars = function() {
    var hash, hashes, i, vars;
    vars = [];
    hash = void 0;
    hashes = self.location.href.slice(self.location.href.indexOf("?") + 1).split("&");
    i = 0;
    while (i < hashes.length) {
      hash = hashes[i].split("=");
      vars.push(hash[0]);
      vars[hash[0]] = unescape(hash[1]);
      i++;
    }
    return vars;
  };

  initTryCatch = function(buffer) {
    var e;
    try {
      //cleanup old compiled code on page if exists
      if (this.i1964js !== undefined && (this.i1964js != null)) {
        this.i1964js.stopEmulatorAndCleanup();
      }
      this.i1964js = new C1964jsEmulator(g_settings, buffer);
      this.i1964js.startEmulator();
    } catch (error) {
      e = error;
      if (this.i1964js !== undefined && (this.i1964js != null)) {
        this.i1964js.terminate = true;
      }
      throw e;
    }
  };

  uncompressAndRun = function(romPath, response) {
    var buffer, unzipper;
    if (romPath.split(".").pop().toLowerCase() !== "zip") {
      buffer = response;
      initTryCatch(buffer);
    } else {
      //This zip library seems to only work if there is one file in the root of the zip's filesystem.
      //Compressing with MacOS causes problems.
      unzipper = new bitjs.archive.Unzipper(response, "lib/bitjs/");
      unzipper.addEventListener(bitjs.archive.UnarchiveEvent.Type.EXTRACT, function(e) {
        if (e.unarchivedFile) {
          console.log("extracted: " + e.unarchivedFile.filename);
          buffer = e.unarchivedFile.fileData.buffer;
          return initTryCatch(buffer);
        }
      });
      unzipper.addEventListener(bitjs.archive.UnarchiveEvent.Type.INFO, function(e) {
        return console.log("zip info: " + e.msg);
      });
      unzipper.addEventListener(bitjs.archive.UnarchiveEvent.Type.PROGRESS, function(e) {});
      //for (var i in e)
      //    console.log(i +': '+ e[i]);
      unzipper.addEventListener(bitjs.archive.UnarchiveEvent.Type.FINISH, function(e) {
        return console.log("finish: " + e.msg);
      });
      unzipper.addEventListener(bitjs.archive.UnarchiveEvent.Type.ERROR, function(e) {
        return console.log("ERROR: " + e.msg);
      });
      unzipper.start();
    }
  };

  this.start1964 = function(settings) {
    var i, romPath, vars, xhr;
    g_settings = settings;
    vars = getUrlVars();
    romPath = void 0;
    i = 0;
    while (i < vars.length) {
      if (vars[i] === "rom") {
        romPath = vars[vars[i]];
      }
      i++;
    }
    if (romPath !== undefined && (romPath != null)) {
      xhr = new XMLHttpRequest();
      xhr.open("GET", romPath, true);
      xhr.responseType = "arraybuffer";
      xhr.send();
      xhr.onload = (e) => {
        // hide the user panel
        hideUserPanel();
        return uncompressAndRun(romPath, e.target.response);
      };
    } else {
      showUserPanel();
    }
  };

  //Check for the various File API support.
  abortRead = function() {
    reader.abort();
  };

  //don't fade out if one of the child divs makes caused this event.
  //if ((event.relatedTarget || event.toElement) == this.parentNode)
  //don't fade out if one of the child divs makes caused this event.
  //if ((event.relatedTarget || event.toElement) == this.parentNode)
  toggleUi = function() {
    var el;
    el = document.getElementById("user_panel");
    if (el.className === "") {
      el.className = "show_fast";
    } else {
      el.className = "";
    }
  };

  errorHandler = function(evt) {
    switch (evt.target.error.code) {
      case evt.target.error.NOT_FOUND_ERR:
        alert("File Not Found!");
        break;
      case evt.target.error.NOT_READABLE_ERR:
        alert("File is not readable");
        break;
      case evt.target.error.ABORT_ERR:
        break;
      default:
        // noop
        alert("An error occurred reading this file.");
    }
  };

  updateProgress = function(evt) {
    var percentLoaded;
    // evt is a ProgressEvent.
    if (evt.lengthComputable) {
      percentLoaded = Math.round((evt.loaded / evt.total) * 100);
      // Increase the progress bar length.
      if (percentLoaded < 100) {
        if (this.progress !== undefined) {
          this.progress.style.width = percentLoaded + "%";
          this.progress.textContent = percentLoaded + "%";
        }
      }
    }
  };

  handleFileSelect = function(evt) {
    var fileName;
    if (evt.target.files === void 0 || evt.target.files[0] === void 0) {
      return;
    }
    fileName = evt.target.files[0].name;
    this.progressBar = document.getElementById("progress_bar");
    // Reset progress indicator on new file selection.
    if (this.progress !== undefined) {
      this.progress.style.width = "0%";
      this.progress.textContent = "0%";
    }
    reader = new FileReader();
    reader.onerror = errorHandler;
    reader.onprogress = updateProgress;
    reader.onabort = function(e) {
      alert("File read cancelled");
    };
    document.getElementById("files").removeEventListener("change", handleFileSelect, false);
    document.getElementById("files").addEventListener("change", handleFileSelect, false);
    reader.onloadstart = function(e) {
      if (this.progressBar !== undefined) {
        document.getElementById("progress_bar").className = "loading";
      }
    };
    reader.onload = function(e) {
      // Ensure that the progress bar displays 100% at the end.
      if (this.progress !== undefined) {
        this.progress.style.width = "100%";
        this.progress.textContent = "100%";
      }
      //setTimeout "document.getElementById('progress_bar').className='';document.getElementById('user_panel').className='';", 1000  unless @progressBar is `undefined`
      setTimeout("document.getElementById('user_panel').disabled = true;document.getElementById('user_panel').className='';", 1000);
      uncompressAndRun(fileName, reader.result);
    };
    // Read in the file as an array buffer.
    reader.readAsArrayBuffer(evt.target.files[0]);
  };

  document.getElementById("user_panel").ontouchend = function(event) {
    return showUserPanel();
  };

  showUserPanel = function() {
    document.getElementById("user_panel").className = "show";
    document.getElementById('user_panel').disabled = false;
    // return self.startGradientBackground();
  };

  hideUserPanel = function() {
    document.getElementById("user_panel").className = "";
    //disable the animating background
    // return self.stopGradientBackground();
  };

  document.onmouseup = function(event) {
    if (event.target.className === "dropbtn" || event.target.className === "file") {
      // disallow hiding if presssing the dropdown
      event.cancelBubble = true;
      if (event.stopPropagation) {
        event.stopPropagation();
      }
      return;
    }
    if (document.getElementById("user_panel").className === "") {
      return showUserPanel();
    } else if (document.getElementById("user_panel").className === "show") {
      return hideUserPanel();
    }
  };

  document.ontouchend = function(event) {
    if (event.target.className === "dropbtn" || event.target.className === "file") {
      // disallow hiding if presssing the dropdown
      event.cancelBubble = true;
      if (event.stopPropagation) {
        event.stopPropagation();
      }
      return;
    }
    if (document.getElementById("user_panel").className === "") {
      return showUserPanel();
    } else if (document.getElementById("user_panel").className === "show") {
      return hideUserPanel();
    }
  };

  document.getElementById("files").addEventListener("change", handleFileSelect, false);

}).call(this);
