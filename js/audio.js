// Generated by CoffeeScript 2.5.1
(function() {
  var C1964jsAudio, root;

  C1964jsAudio = (function() {
    var audioBuffer, audioContext;

    class C1964jsAudio {
      constructor() {}

      processAudio(memory, from, length) {
        var PI_2_400, error, i, k, left, right, source;
        return;
        try {
          if (audioContext === "unsupported") {
            return;
          }
          if (audioContext === undefined) {
            audioContext = new webkitAudioContext();
          }
        } catch (error1) {
          error = error1;
          //log "Your browser doesn't support Web Audio."
          audioContext = "unsupported";
          return false;
        }
        PI_2_400 = 1.0 / (Math.PI * 2 * 400);
        // Create/set audio buffer for each chunk
        source = audioContext.createBufferSource();
        if (length < 4) {
          return;
        }
        if (audioBuffer === undefined) {
          audioBuffer = audioContext.createBuffer(2, length / 2 / 2, 44100);
        }
        left = audioBuffer.getChannelData(0);
        right = audioBuffer.getChannelData(1);
        i = from;
        k = 0;
        while (k < length) {
          left[k] = ((memory.u8[i] << 8 | memory.u8[i + 1]) << 16 >> 16) * PI_2_400;
          right[k] = ((memory.u8[i + 2] << 8 | memory.u8[i + 3]) << 16 >> 16) * PI_2_400;
          i += 4;
          k++;
        }
        source.buffer = audioBuffer;
        this.startTime += audioBuffer.duration;
        source.connect(audioContext.destination);
        source.loop = false;
        source.noteOn(this.startTime);
        return true;
      }

    };

    audioContext = void 0;

    audioBuffer = void 0;

    return C1964jsAudio;

  }).call(this);

  //hack global space until we export classes properly
  //node.js uses exports; browser uses this (window)
  root = typeof exports !== "undefined" && exports !== null ? exports : self;

  root.C1964jsAudio = C1964jsAudio;

}).call(this);
